<!DOCTYPE html>
<html>
<head>
	<title>JSON</title>
	<object data="tabs.xhtml"></object>
</head>
<body>
<header data-ts="TopBar"></header>
<main data-ts="Main" class="doc-tags">
	<article>
		<h1>Tags JSON API</h1>
		<section class="desc">
			<p>WIP</p>
		</section>
		<section>
			<div data-ts="DoxApi">
				<script type="application/json">
					{
						name: "ts.ui.TagModel",
						properties: [
							{
								name: "type",
								type: "string",
								desc: "The CSS classname."
							},
							{
								name: "icon",
								type: "string",
								desc: "The icon's classname."
							},
							{
								name: "tabindex",
								type: "number",
								desc: "The `tabindex` of the tag."
							},
							{
								name: "data",
								type: "(Map|string)",
								desc: "The `keys` and `values` of the tag or the only `key` as a string."
							},
							{
								name: "locked",
								type: "boolean",
								desc: "Tag is locked?"
							},
							{
								name: "onclick",
								type: "(Function)",
								desc: "Called whenever the tag gets clicked."
							},
							{
								name: "ondelete",
								type: "(Function)",
								desc: "Called whenever the tag gets deleted."
							}
						],
						methods: [
							{
								name: "click",
								desc: "Trigger a click on the tag if `onclick` is set."
							},
							{
								name: "delete",
								desc: "Trigger deletion of the tag if `ondelete` is set."
							}
						]
					}
				</script>
			</div>
		</section>
		<section>
			<h3>Key-only</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-keyonly', tag => {
								tag.render({
									data: 'Dragons!'
								})
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-keyonly" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Icon-only</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-icononly', tag => {
								tag.render({
									icon: 'ts-icon-timer'
								})
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-icononly" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Value-only</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-valonly', tag => {
								tag.render({
									data: new Map([
										[undefined, 'Roll a d20']
									])
								})
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-valonly" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Key-Value</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-keyval', tag => {
								tag.render({
									data: new Map([
										['Area of Origin', 'The Sword Coast']
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-keyval" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Key with multiple values</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-keyvals', tag => {
								tag.render({
									data: new Map([
										['The Teeming Hive of Evil', ['Skullport', 'Port of Shadows']]
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-keyvals" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Multiple keys with single value</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-keysval', tag => {
								tag.render({
									data: new Map([
										[['Facial Tentacles', 'Potent Psionics'], 'Mind Flayer']
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-keysval" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Multiple keys with multiple values</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-keysvals', tag => {
								tag.render({
									data: new Map([
										[['Magic-user', 'Undead'], ['Lich', 'Vampire']]
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-keysvals" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Multiple sets of key-values</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-multikeysvals', tag => {
								tag.render({
									data: new Map([
										['Acererak'],
										['Alignment', ['Lawful', 'Evil']],
										['Hobbies', 'Building Dungeons'],
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-multikeysvals" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Optional icon</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-opticon', tag => {
								tag.render({
									icon: 'ts-icon-rating',
									data: new Map([
										['Dungeon', 'Tomb of Horrors']
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-opticon" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Optional clickability</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-optclick', tag => {
								tag.render({
									onclick: () => {
										ts.ui.Notification.success('Do you see?');
									},
									data: new Map([
										['Vision', ['Blindsight', 'Truesight', 'Darkvision']]
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-optclick" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Optional delete button</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-optdel', tag => {
								tag.render({
									ondelete: () => {
										ts.ui.Notification.info('Tag disintegrated!');
									},
									data: new Map([
										['Languages', ['Sylvan', 'Common', 'Draconic', 'Giant']]
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-optdel" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>Optional locked look</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tag-optlock', tag => {
								tag.render({
									locked: true,
									ondelete: () => {
										ts.ui.Notification.info('I am not visible anyway.');
									},
									icon: 'ts-icon-location',
									data: new Map([
										['Dungeon', 'Hidden Shrine of Tamoachan']
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tag-optlock" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>
		<section>
			<h3>List of Tags</h3>
			<ul class="splitscreen">
				<li>
					<figure data-ts="DoxScript">
						<script type="runnable">
							ts.ui.get('#tags-elem1', tag => {
								tag.render({
									data: new Map([
										['Lich', 'Acererak']
									])
								});
							});
							ts.ui.get('#tags-elem2', tag => {
								tag.render({
									ondelete: () => {
										ts.ui.Notification.warning('I hope you know what you\'re doing...');
									},
									data: new Map([
										['Beholder', 'Xanathar']
									])
								});
							});
						</script>
					</figure>
				</li>
				<li>
					<div class="doc-showcase">
						<figure id="tags-elem1" data-ts="Tag"></figure>
						<figure id="tags-elem2" data-ts="Tag"></figure>
					</div>
				</li>
			</ul>
		</section>

		<section>
			<h3>List of Tags (maximized)</h3>
			<section data-ts="Note">
				<i class="ts-icon-todo"></i>
				<p>This API is under construction.</p>
			</section>
		</section>
	</article>
</main>
</body>
</html>
