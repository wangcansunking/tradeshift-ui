<!DOCTYPE html>
<html>
<head>
	<title>Fancy HTML</title>
	<object data="tabs.xhtml"></object>
</head>
<body>
<header data-ts="TopBar"></header>
<main data-ts="Main" class="doc-tags">
	<article>
		<h1>Tags Fancy HTML API</h1>
		<section class="desc">
			<p>Tags represent a set of interactive keywords that help to label, organize, and categorize objects.</p>
		</section>
		<section>
			<h3>Key-only</h3>
			<p>If you want to show an all uppercased <code>key</code> only, use a <code>string</code> for <code>data-ts.data</code>.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<figure
						data-ts="Tag"
						data-ts.data="Dragons!"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Icon-only</h3>
			<p>If you only want to show a single icon, just use <code>data-ts.icon</code> and use the classname of an <a data-ts="Button" href="/#components/icons/css.html">Icon</a>.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<figure
						data-ts="Tag"
						data-ts.icon="ts-icon-timer"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Value-only</h3>
			<section data-ts="Note">
				<i class="ts-icon-info"></i>
				<p>When passing complex data structures to <code>data-ts.data</code>, you need to <code>JSON.stringify()</code> the value and then pass it to <code>encodeURIComponent</code> to get a value that can be safely used as an attribute.</p>
			</section>
			<section data-ts="Note">
				<i class="ts-icon-warning"></i>
				<p>Keep in mind that this structure will be converted into a <code>Map</code>, using non-unique <code>keys</code> will result in <strong>unreliable behavior</strong>!</p>
			</section>
			<p>If you fancy a simpler approach with lighter font weights and lowercase characters, use a <code>Map</code>-like <code>Array</code> with only a <code>value</code> and a falsy <code>key</code>.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								[null, 'Roll a d20']
							]
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.data="%5B%5Bnull%2C%22Roll%20a%20d20%22%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>

		<p>It's also possible to set <code>data</code> (and all other attributes) later, through the JS API.</p>
		<script>
			ts.ui.ready(() => {
				ts.ui.get('#tag-roll20', tag => {
					tag.data = new Map([
						[null, 'Roll a d20']
					]);
				});
			});
		</script>
		<figure data-ts="DoxMarkup">
			<script>
				<scrxpt>
					const data = encodeURIComponent(JSON.stringify(
					));
					ts.ui.ready(() => {
						ts.ui.get('#tag-roll20', tag => {
							tag.data = new Map([
								[null, 'Roll a d20']
							]);
						});
					});
				</scrxpt>
				<figure
					id="tag-roll20"
					data-ts="Tag"
				/>
			</script>
			<output />
		</figure>
		<section>
			<h3>Key-Value</h3>
			<p>If you need a <code>key</code> with a <code>value</code> attached to it, use the <code>Map</code>-like <code>Array</code> structure like before, but with a <code>key</code> and a <code>value</code> this time.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Area of Origin', 'The Sword Coast']
							]
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.data="%5B%5B%22Area%20of%20Origin%22%2C%22The%20Sword%20Coast%22%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Key with multiple values</h3>
			<p>You can have a single <code>key</code> with multiple <code>values</code>, just make the <code>value</code> part of the <code>Map</code>-like <code>Array</code> an <code>Array</code>.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['The Teeming Hive of Evil', ['Skullport', 'Port of Shadows']]
							]
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.data="%5B%5B%22The%20Teeming%20Hive%20of%20Evil%22%2C%5B%22Skullport%22%2C%22Port%20of%20Shadows%22%5D%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Multiple keys with single value</h3>
			<p>Of course you could flip it around and use several <code>keys</code> for a single <code>value</code>.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								[['Facial Tentacles', 'Potent Psionics'], 'Mind Flayer']
							]
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.data="%5B%5B%5B%22Facial%20Tentacles%22%2C%22Potent%20Psionics%22%5D%2C%22Mind%20Flayer%22%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Multiple keys with multiple values</h3>
			<p>It comes naturally that you can have several <code>keys</code> together with several <code>values</code>.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								[['Magic-user', 'Undead'], ['Lich', 'Vampire']]
							]
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.data="%5B%5B%5B%22Magic-user%22%2C%22Undead%22%5D%2C%5B%22Lich%22%2C%22Vampire%22%5D%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Multiple sets of key-values</h3>
			<p>If you want to have several <code>key</code>/<code>value</code> sets in a single tag, just have more entries in your <code>Map</code>-like <code>Array</code>.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Acererak'],
								['Alignment', ['Lawful', 'Evil']],
								['Hobbies', 'Building Dungeons'],
							]
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.data="%5B%5B%22Acererak%22%5D%2C%5B%22Alignment%22%2C%5B%22Lawful%22%2C%22Evil%22%5D%5D%2C%5B%22Hobbies%22%2C%22Building%20Dungeons%22%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Icon</h3>
			<p>Just like above, you can add an icon next to any combinaton of <code>keys</code> and <code>values</code>.</p>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Dungeon', 'Tomb of Horrors']
							]
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.icon="ts-icon-rating"
						data-ts.data="%5B%5B%22Dungeon%22%2C%22Tomb%20of%20Horrors%22%5D%5D"
					/>
				</script>
				<output />
			</figure>

			<p>This also works with the <a data-ts="Button" href="/#components/userimages/index.html"><code>UserImages</code></a>, altough they will be fixed at <code>22x22</code> pixels.</p>

			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Lich', 'Acererak']
							]
						));
						const userimage = encodeURIComponent(JSON.stringify(
							{
								item: 'userimage',
								name: 'Acererak',
								src: 'assets/acererak.png'
							}
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.icon="%7B%22item%22%3A%22userimage%22%2C%22name%22%3A%22Acererak%22%2C%22src%22%3A%22assets%2Facererak.png%22%7D"
						data-ts.data="%5B%5B%22Lich%22%2C%22Acererak%22%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Clickable look & click handler</h3>
			<p>If you want to make your tag look like it can be clicked, once you've initialized your tag, set the <code>onclick</code> handler.</p>
			<script>
				ts.ui.ready(() => {
					ts.ui.get('#tag-clickable', tag => {
						tag.onclick = () => {
							ts.ui.Notification.success('Do you see?');
						};
					});
				});
			</script>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Vision', ['Blindsight', 'Truesight', 'Darkvision']]
							]
						));
						ts.ui.ready(() => {
							ts.ui.get('#tag-clickable', tag => {
								tag.onclick = () => {
									ts.ui.Notification.success('Do you see?');
								};
							});
						});
					</scrxpt>
					<figure
						id="tag-clickable"
						data-ts="Tag"
						data-ts.icon="ts-icon-view"
						data-ts.data="%5B%5B%22Vision%22%2C%5B%22Blindsight%22%2C%22Truesight%22%2C%22Darkvision%22%5D%5D%5D"
					/>
				</script>
				<output />
			</figure>

			<p>You can use your own click handler if you'd like.</p>
			<section data-ts="Note">
				<i class="ts-icon-info"></i>
				<p>Make sure to set <code>data-ts.clickable="true"</code>, otherwise your tag won't look like it's clickable.</p>
			</section>
			<script>
				ts.ui.ready(() => {
					ts.ui.get('#tag-clickable-ownhandler', tag => {
						tag.element.addEventListener('click', e => {
							ts.ui.Notification.success('Do you see?');
						});
					});
				});
			</script>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Vision', ['Blindsight', 'Truesight', 'Darkvision']]
							]
						));
						ts.ui.ready(() => {
							ts.ui.get('#tag-clickable-ownhandler', tag => {
								tag.element.addEventListener('click', e => {
									ts.ui.Notification.success('Do you see?');
								});
							});
						});
					</scrxpt>
					<figure
						id="tag-clickable-ownhandler"
						data-ts="Tag"
						data-ts.clickable="true"
						data-ts.icon="ts-icon-view"
						data-ts.data="%5B%5B%22Vision%22%2C%5B%22Blindsight%22%2C%22Truesight%22%2C%22Darkvision%22%5D%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Delete button & delete handler</h3>
			<p>If you want to be able to remove a tag, once you've initialized the tag, set the <code>ondelete</code> handler. This will create a <code>DEL</code> element as the last child of the tag.</p>
			<section data-ts="Note">
				<i class="ts-icon-warning"></i>
				<p>When the <code>DEL</code> element is clicked, the tag will be removed from the DOM after a <code>setTimeout</code>. Don't try to read anything through the DOM at this point.</p>
			</section>
			<script>
				ts.ui.ready(() => {
					ts.ui.get('#tag-deletable', tag => {
						tag.ondelete = () => {
							ts.ui.Notification.info('Tag disintegrated!');
						}
					});
				});
			</script>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Languages', ['Sylvan', 'Common', 'Draconic', 'Giant']]
							]
						));
						ts.ui.ready(() => {
							ts.ui.get('#tag-deletable', tag => {
								tag.ondelete = () => {
									ts.ui.Notification.info('Tag disintegrated!');
								}
							});
						});
					</scrxpt>
					<figure
						id="tag-deletable"
						data-ts="Tag"
						data-ts.data="%5B%5B%22Languages%22%2C%5B%22Sylvan%22%2C%22Common%22%2C%22Draconic%22%2C%22Giant%22%5D%5D%5D"
					/>
				</script>
				<output />
			</figure>

			<p>Just like with <code>click</code>, you can use your own click handler for deletion if you'd like.</p>
			<section data-ts="Note">
				<i class="ts-icon-warning"></i>
				 <p>You have to remember that only react when the user clicks on the <code>DEL</code> element by checking for <code>e.target.localName</code>.</p>
			</section>
			<script>
				ts.ui.ready(() => {
					ts.ui.get('#tag-deletable-ownhandler', tag => {
						tag.element.addEventListener('click', e => {
							console.log('clicked', e);
							if (e.target.localName === 'del') {
								ts.ui.Notification.info('Tag disintegrated!');
							}
						});
					});
				});
			</script>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Languages', ['Sylvan', 'Common', 'Draconic', 'Giant']]
							]
						));
						ts.ui.ready(() => {
							ts.ui.get('#tag-deletable-ownhandler', tag => {
								tag.element.addEventListener('click', e => {
									if (e.target.localName === 'del') {
										ts.ui.Notification.info('Tag disintegrated!');
									}
								});
							});
						});
					</scrxpt>
					<figure
						id="tag-deletable-ownhandler"
						data-ts="Tag"
						data-ts.deletable="true"
						data-ts.data="%5B%5B%22Languages%22%2C%5B%22Sylvan%22%2C%22Common%22%2C%22Draconic%22%2C%22Giant%22%5D%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Click & delete</h3>
			<p>In case you want to handle <code>clicks</code> and have a <code>delete</code> button on the same tag, you can do that the same way as above.</p>
			<script>
				ts.ui.ready(() => {
					ts.ui.get('#tag-delete-click', tag => {
						tag.onclick = () => {
							ts.ui.Notification.info('Don\'t poke the beholder!');
						};
						tag.ondelete = () => {
							ts.ui.Notification.warning('I hope you know what you\'re doing...');
						}
					});
				});
			</script>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Beholder', 'Xanathar']
							]
						));
						const icon = encodeURIComponent(JSON.stringify(
							{
								item: 'userimage',
								name: 'Xanathar',
								src: 'assets/xanathar.png'
							}
						));
						ts.ui.ready(() => {
							ts.ui.get('#tag-delete-click', tag => {
								tag.onclick = () => {
									ts.ui.Notification.info('Don\'t poke the beholder!');
								};
								tag.ondelete = () => {
									ts.ui.Notification.warning('I hope you know what you\'re doing...');
								}
							});
						});
					</scrxpt>
					<figure
						id="tag-delete-click"
						data-ts="Tag"
						data-ts.data="%5B%5B%22Beholder%22%2C%22Xanathar%22%5D%5D"
						data-ts.icon="%7B%22item%22%3A%22userimage%22%2C%22name%22%3A%22Xanathar%22%2C%22src%22%3A%22assets%2Fxanathar.png%22%7D"
					/>
				</script>
				<output />
			</figure>

			<p>You can always handle your own <code>clicks</code> if that's what you're into.</p>
			<section data-ts="Note">
				<i class="ts-icon-warning"></i>
				 <p>You still have to remember that only handle the <code>delete</code> <code>click</code> when the user clicks on the <code>DEL</code> element by checking for <code>e.target.localName</code>.</p>
			</section>
			<script>
				ts.ui.ready(() => {
					ts.ui.get('#tag-delete-click-ownhandler', tag => {
						tag.element.addEventListener('click', e => {
							if (e.target.localName === 'del') { // This is an important line!
								ts.ui.Notification.warning('I hope you know what you\'re doing...');
							} else {
								ts.ui.Notification.info('Don\'t poke the beholder!');
							}
						});
					});
				});
			</script>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Beholder', 'Xanathar']
							]
						));
						const icon = encodeURIComponent(JSON.stringify(
							{
								item: 'userimage',
								name: 'Xanathar',
								src: 'assets/xanathar.png'
							}
						));
						ts.ui.ready(() => {
							ts.ui.get('#tag-delete-click-ownhandler', tag => {
								tag.element.addEventListener('click', e => {
									if (e.target.localName === 'del') {
										ts.ui.Notification.warning('I hope you know what you\'re doing...');
									} else {
										ts.ui.Notification.info('Don\'t poke the beholder!');
									}
								});
							});
						});
					</scrxpt>
					<figure
						id="tag-delete-click-ownhandler"
						data-ts="Tag"
						data-ts.clickable="true"
						data-ts.deletable="true"
						data-ts.data="%5B%5B%22Beholder%22%2C%22Xanathar%22%5D%5D"
						data-ts.icon="%7B%22item%22%3A%22userimage%22%2C%22name%22%3A%22Xanathar%22%2C%22src%22%3A%22assets%2Fxanathar.png%22%7D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>Locked look</h3>
			<p>If you want to lock down a tag, use <code>data-ts.locked="true"</code>.</p>
			<section data-ts="Note">
				<i class="ts-icon-info"></i>
				<p>A locked tag will have its <code>DEL</code> button hidden and all <code>click</code>-related styling deactivated.</p>
			</section>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						const data = encodeURIComponent(JSON.stringify(
							[
								['Dungeon', 'Hidden Shrine of Tamoachan']
							]
						));
					</scrxpt>
					<figure
						data-ts="Tag"
						data-ts.icon="ts-icon-location"
						data-ts.locked="true"
						data-ts.data="%5B%5B%22Dungeon%22%2C%22Hidden%20Shrine%20of%20Tamoachan%22%5D%5D"
					/>
				</script>
				<output />
			</figure>
		</section>
		<section>
			<h3>List of Tags</h3>
			<p>Whenever you put tags one after another, they will be displayed in an <code>inline</code> fashion.
			<script>
				ts.ui.ready(() => {
					ts.ui.get('#tag-lich', tag => {
						tag.data = new Map([
							['Lich', 'Acererak']
						]);
						tag.icon = {
							item: 'userimage',
							name: 'Acererak',
							src: 'assets/acererak.png'
						};
					});
					ts.ui.get('#tag-beholder', tag => {
						tag.data = new Map([
							['Beholder', 'Xanathar']
						]);
						tag.icon = {
							item: 'userimage',
							name: 'Xanathar',
							src: 'assets/xanathar.png'
						};
					});
				});
			</script>
			<figure data-ts="DoxMarkup">
				<script>
					<scrxpt>
						ts.ui.ready(() => {
							ts.ui.get('#tag-lich', tag => {
								tag.data = new Map([
									['Lich', 'Acererak']
								]);
								tag.icon = {
									item: 'userimage',
									name: 'Acererak',
									src: 'assets/acererak.png'
								};
							});
							ts.ui.get('#tag-beholder', tag => {
								tag.data = new Map([
									['Beholder', 'Xanathar']
								]);
								tag.icon = {
									item: 'userimage',
									name: 'Xanathar',
									src: 'assets/xanathar.png'
								};
							});
						});
					</scrxpt>
					<div>
						<figure
							id="tag-lich"
							data-ts="Tag"
						/>
						<figure
							id="tag-beholder"
							data-ts="Tag"
						/>
					</div>
				</script>
				<output />
			</figure>
		</section>

		<section>
			<h3>List of Tags (maximized)</h3>
			<section data-ts="Note">
				<i class="ts-icon-todo"></i>
				<p>This API is under construction.</p>
			</section>
		</section>
	</article>
</main>
</body>
</html>
